# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClosedQuestionChoice {
  no: Float!
  choice: String!
}

type QuestionUnionType {
  question: QuestionUnion!
  type: QuestionType!
  _id: String!
}

union QuestionUnion = ClosedQuestion | GridQuestion | LinearQuestion | OpenedQuestion | PersonalQuestion

type ClosedQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float!
  choices: [ClosedQuestionChoice!]!
  type: ClosedQuestionType
}

enum ClosedQuestionType {
  One
  Multiple
}

type GridQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float!
  rowContent: [String!]
  colContent: [String!]
  type: GridQuestionType
}

enum GridQuestionType {
  One
  Multiple
}

type LinearQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float!
  leftRange: Float!
  rightRange: Float!
  leftLabel: String
  rightLabel: String
}

type OpenedQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float!
  type: OpenedQuestionType
}

enum OpenedQuestionType {
  Default
  Date
  Time
  Address
  File
}

type PersonalQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float!
  encoded: Boolean!
  type: PersonalQuestionType!
}

enum PersonalQuestionType {
  Phone
  Address
  Email
}

enum QuestionType {
  Closed
  Grid
  Linear
  Opened
  Personal
}

type Section {
  _id: String!
  title: String
  questions: [QuestionUnionType!]
}

type GridAnswerContent {
  rowNo: Float!
  colNo: Float!
}

type AnswerUnionType {
  answer: AnswerUnion!
  type: QuestionType!
}

union AnswerUnion = ClosedAnswer | GridAnswer | LinearAnswer | OpenedAnswer | PersonalAnswer

type ClosedAnswer {
  question: QuestionUnion!
  no: [Float!]!
}

type GridAnswer {
  question: QuestionUnion!
  content: [GridAnswerContent!]
}

type LinearAnswer {
  question: QuestionUnion!
  no: Float!
}

type OpenedAnswer {
  question: QuestionUnion!
  content: String
}

type PersonalAnswer {
  question: QuestionUnion!
  content: String
}

type Submission {
  createdAt: DateTime!
  updatedAt: DateTime!
  respondent: User
  form: Form!
  answers: [AnswerUnionType!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Form {
  createdAt: DateTime!
  updatedAt: DateTime!
  _id: String!
  title: String!
  description: String
  state: FormState!
  isPromoted: Boolean!
  expiredAt: DateTime
  privacyExpiredAt: DateTime
  owner: User!
  sections: [Section!]
  submissions: [Submission!]
}

enum FormState {
  Ready
  Expired
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  phoneNum: String
  email: String!
  password: String!
  type: UserType!
  coin: Int
  avatarImg: String
  forms: [Form!]
  isVerified: Boolean
}

enum UserType {
  Free
  Premium
  Admin
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
}

type FindUserByIdOutput {
  ok: Boolean!
  error: String
  user: User
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type CreateFormOutput {
  ok: Boolean!
  error: String
}

type FindSectionByIdOutput {
  ok: Boolean!
  error: String
  section: Section
}

type FIndFormByIdOutput {
  ok: Boolean!
  error: String
  form: Form
}

type DeleteFormOutput {
  ok: Boolean!
  error: String
}

type CreateSubmissionOutput {
  ok: Boolean!
  error: String
}

type FindSubmissionByIdOutput {
  ok: Boolean!
  error: String
  submission: Submission
}

type Query {
  test: Boolean!
  findUserById(input: FindUserByIdInput!): FindUserByIdOutput!
  findSectionById(input: FindSectionByIdInput!): FindSectionByIdOutput!
  findFormById(input: FindFormByIdInput!): FIndFormByIdOutput!
  findSubmissionById(input: FindSubmissionByIdInput!): FindSubmissionByIdOutput!
}

input FindUserByIdInput {
  id: String!
}

input FindSectionByIdInput {
  sectionId: String!
}

input FindFormByIdInput {
  formId: String!
}

input FindSubmissionByIdInput {
  submissionId: String!
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  createForm(input: CreateFormInput!): CreateFormOutput!
  deleteForm(input: DeleteFormInput!): DeleteFormOutput!
  createSubmission(input: CreateSubmissionInput!): CreateSubmissionOutput!
}

input CreateAccountInput {
  username: String!
  phoneNum: String
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateFormInput {
  title: String!
  description: String
  sections: [CreateSectionInput!]
}

input CreateSectionInput {
  title: String
  opened: [CreateOpenedQuestionInput!]
  closed: [CreateClosedQuestionInput!]
  grid: [CreateGridQuestionInput!]
  personal: [CreatePersonalQuestionInput!]
  linear: [CreateLinearQuestionInput!]
}

input CreateOpenedQuestionInput {
  question: CreateOpenedQuestionInputType!
  type: QuestionType!
}

input CreateOpenedQuestionInputType {
  content: String!
  description: String
  required: Boolean
  order: Float!
  type: OpenedQuestionType
}

input CreateClosedQuestionInput {
  question: CreateClosedQuestionInputType!
  type: QuestionType!
}

input CreateClosedQuestionInputType {
  choices: [ClosedQuestionChoiceInputType!]!
  type: ClosedQuestionType
  content: String!
  description: String
  required: Boolean
  order: Float!
}

input ClosedQuestionChoiceInputType {
  no: Float!
  choice: String!
}

input CreateGridQuestionInput {
  question: CreateGridQuestionInputType!
  type: QuestionType!
}

input CreateGridQuestionInputType {
  content: String!
  description: String
  required: Boolean
  order: Float!
  rowContent: [String!]
  colContent: [String!]
  type: GridQuestionType
}

input CreatePersonalQuestionInput {
  question: CreatePersonalQuestionInputType!
  type: QuestionType!
}

input CreatePersonalQuestionInputType {
  content: String!
  description: String
  required: Boolean
  order: Float!
  encoded: Boolean!
  type: PersonalQuestionType!
}

input CreateLinearQuestionInput {
  question: CreateLinearQuestionInputType!
  type: QuestionType!
}

input CreateLinearQuestionInputType {
  content: String!
  description: String
  required: Boolean
  order: Float!
  leftRange: Float!
  rightRange: Float!
  leftLabel: String
  rightLabel: String
}

input DeleteFormInput {
  formId: String!
}

input CreateSubmissionInput {
  formId: String!
  answers: [CreateAnswersInput!]
}

input CreateAnswersInput {
  opened: [CreateOpenedAnswerInput!]
  closed: [CreateClosedAnswerInput!]
  linear: [CreateLinearAnswerInput!]
  grid: [CreateGridAnswerInput!]
  personal: [CreatePersonalAnswerInput!]
}

input CreateOpenedAnswerInput {
  answer: CreateOpenedAnswerInputType!
  type: QuestionType!
}

input CreateOpenedAnswerInputType {
  content: String
  questionId: String!
}

input CreateClosedAnswerInput {
  answer: CreateClosedAnswerInputType!
  type: QuestionType!
}

input CreateClosedAnswerInputType {
  no: [Float!]!
  questionId: String!
}

input CreateLinearAnswerInput {
  answer: CreateLinearAnswerInputType!
  type: QuestionType!
}

input CreateLinearAnswerInputType {
  no: Float!
  questionId: String!
}

input CreateGridAnswerInput {
  answer: CreateGridAnswerInputType!
  type: QuestionType!
}

input CreateGridAnswerInputType {
  content: [GridAnswerContentInputType!]
  questionId: String!
}

input GridAnswerContentInputType {
  rowNo: Float!
  colNo: Float!
}

input CreatePersonalAnswerInput {
  answer: CreatePersonalAnswerInputType!
  type: QuestionType!
}

input CreatePersonalAnswerInputType {
  questionId: String!
  content: String
}