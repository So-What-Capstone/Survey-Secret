# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClosedQuestionChoiceType {
  no: Float!
  choice: String!
}

type Section {
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  order: Float!
  form: Form!
  questions: [QuestionUnion!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

union QuestionUnion = ClosedQuestion | GridQuestion | LinearQuestion | OpenedQuestion | PersonalQuestion

type ClosedQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float
  section: Section!
  choices: [ClosedQuestionChoiceType!]!
  type: ClosedQuestionType
}

enum ClosedQuestionType {
  One
  Multiple
}

type GridQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float
  section: Section!
  rowContent: [String!]
  colContent: [String!]
  type: GridQuestionType
}

enum GridQuestionType {
  One
  Multiple
}

type LinearQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float
  section: Section!
  leftRange: Float!
  rightRange: Float!
  leftLabel: String
  rightLabel: String
}

type OpenedQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float
  section: Section!
  type: OpenedQuestionType
}

enum OpenedQuestionType {
  Default
  Date
  Time
  Address
  File
}

type PersonalQuestion {
  content: String!
  description: String
  required: Boolean
  order: Float
  section: Section!
  encoded: Boolean!
  type: PersonalQuestionType!
}

enum PersonalQuestionType {
  Phone
  Address
  Email
}

type Form {
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  state: FormState!
  isPromoted: Boolean!
  expiredAt: DateTime
  privacyExpiredAt: DateTime
  owner: User!
  sections: [Section!]
}

enum FormState {
  Ready
  Expired
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  phoneNum: String
  email: String!
  password: String!
  type: UserType!
  coin: Int!
  avatarImg: String
  forms: [Form!]
}

enum UserType {
  Free
  Premium
  Admin
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
}

type FindUserByIdOutput {
  ok: Boolean!
  error: String
  user: User
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type CreateFormOutput {
  ok: Boolean!
  error: String
}

type CreateSectionOutput {
  ok: Boolean!
  error: String
}

type CreateClosedQuestionOutput {
  ok: Boolean!
  error: String
}

type CreateGridQuestionOutput {
  ok: Boolean!
  error: String
}

type CreateLinearQuestionOutput {
  ok: Boolean!
  error: String
}

type CreateOpenedQuestionOutput {
  ok: Boolean!
  error: String
}

type CreatePersonalQuestionOutput {
  ok: Boolean!
  error: String
}

type Query {
  test: Boolean!
  findUserById(input: FindUserByIdInput!): FindUserByIdOutput!
}

input FindUserByIdInput {
  id: String!
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  createForm(input: CreateFormInput!): CreateFormOutput!
  createSection(input: CreateSectionInput!): CreateSectionOutput!
  createClosedQuestion(input: CreateClosedQuestionInput!): CreateClosedQuestionOutput!
  createOpenedQuestion(input: CreateOpenedQuestionInput!): CreateOpenedQuestionOutput!
  createLinearQuestion(input: CreateLinearQuestionInput!): CreateLinearQuestionOutput!
  createGridQuestion(input: CreateGridQuestionInput!): CreateGridQuestionOutput!
  createPersonalQuestion(input: CreatePersonalQuestionInput!): CreatePersonalQuestionOutput!
}

input CreateAccountInput {
  username: String!
  phoneNum: String
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateFormInput {
  title: String!
  description: String
}

input CreateSectionInput {
  title: String!
  order: Float!
  formId: String!
}

input CreateClosedQuestionInput {
  content: String!
  description: String
  required: Boolean
  order: Float
  choices: [ClosedQuestionChoiceTypeInput!]!
  type: ClosedQuestionType
  sectionId: String!
}

input ClosedQuestionChoiceTypeInput {
  no: Float!
  choice: String!
}

input CreateOpenedQuestionInput {
  content: String!
  description: String
  required: Boolean
  order: Float
  type: OpenedQuestionType
}

input CreateLinearQuestionInput {
  content: String!
  description: String
  required: Boolean
  order: Float
  leftRange: Float!
  rightRange: Float!
  leftLabel: String
  rightLabel: String
}

input CreateGridQuestionInput {
  content: String!
  description: String
  required: Boolean
  order: Float
  rowContent: [String!]
  colContent: [String!]
  type: GridQuestionType
}

input CreatePersonalQuestionInput {
  content: String!
  description: String
  required: Boolean
  order: Float
  encoded: Boolean!
  type: PersonalQuestionType!
}