# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClosedQuestionChoice {
  no: Float!
  choice: String!
  attachment: String
  activatedSection: String
}

type Question {
  _id: String!
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
}

enum QuestionType {
  Closed
  Grid
  Linear
  Opened
  Personal
}

type Section {
  _id: String!
  title: String
  questions: [QuestionUnion!]!
  order: Float!
}

union QuestionUnion = ClosedQuestion | GridQuestion | LinearQuestion | OpenedQuestion | PersonalQuestion

type ClosedQuestion {
  _id: String!
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  choices: [ClosedQuestionChoice!]!
  closedType: ClosedQuestionType
}

enum ClosedQuestionType {
  One
  Multiple
}

type GridQuestion {
  _id: String!
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  rowContent: [String!]
  colContent: [String!]
  gridType: GridQuestionType
}

enum GridQuestionType {
  One
  Multiple
}

type LinearQuestion {
  _id: String!
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  leftRange: Float!
  rightRange: Float!
  leftLabel: String
  rightLabel: String
}

type OpenedQuestion {
  _id: String!
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  attachment: String
  openedType: OpenedQuestionType
}

enum OpenedQuestionType {
  Default
  Date
  Time
  Address
  File
  Number
}

type PersonalQuestion {
  _id: String!
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  attachment: String
  encoded: Boolean!
  personalType: PersonalQuestionType!
}

enum PersonalQuestionType {
  Phone
  Address
  Email
}

type GridAnswerContent {
  rowNo: Float!
  colNo: Float!
}

type Submission {
  createdAt: DateTime!
  updatedAt: DateTime!
  _id: String!
  respondent: User
  form: Form!
  answers: [AnswerUnion!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

union AnswerUnion = ClosedAnswer | GridAnswer | LinearAnswer | OpenedAnswer | PersonalAnswer

type ClosedAnswer {
  question: String!
  kind: QuestionType!
  no: [Float!]!
}

type GridAnswer {
  question: String!
  kind: QuestionType!
  content: [GridAnswerContent!]
}

type LinearAnswer {
  question: String!
  kind: QuestionType!
  no: Float!
}

type OpenedAnswer {
  question: String!
  kind: QuestionType!
  content: String
  attachment: String
}

type PersonalAnswer {
  question: String!
  kind: QuestionType!
  content: String
  attachment: String
}

type Form {
  createdAt: DateTime!
  updatedAt: DateTime!
  _id: String!
  title: String!
  description: String
  state: FormState!
  isPromoted: Boolean!
  expiredAt: DateTime
  privacyExpiredAt: DateTime
  owner: User!
  sections: [Section!]
  submissions: [Submission!]
  representativeQuestion: Question
}

enum FormState {
  Ready
  InProgress
  Expired
}

type User {
  createdAt: DateTime!
  updatedAt: DateTime!
  _id: String!
  username: String!
  phoneNum: String
  email: String!
  password: String!
  type: UserType!
  coin: Int
  avatarImg: String
  forms: [Form!]
  isVerified: Boolean
}

enum UserType {
  Free
  Premium
  Admin
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
}

type FindUserByIdOutput {
  ok: Boolean!
  error: String
  user: User
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type EditUserOutput {
  ok: Boolean!
  error: String
}

type meOutput {
  ok: Boolean!
  error: String
  user: User
}

type Template {
  createdAt: DateTime!
  updatedAt: DateTime!
  _id: String!
  title: String!
  description: String
  sections: [Section!]
}

type CreateFormOutput {
  ok: Boolean!
  error: String
  formId: String
}

type FindSectionByIdOutput {
  ok: Boolean!
  error: String
  section: Section
}

type FindFormByIdOutput {
  ok: Boolean!
  error: String
  form: Form
}

type DeleteFormOutput {
  ok: Boolean!
  error: String
}

type EditFormOutput {
  ok: Boolean!
  error: String
}

type SearchFormsOutput {
  ok: Boolean!
  error: String
  forms: [Form!]
  lastId: String
}

type GetFormsOutput {
  ok: Boolean!
  error: String
  lastId: String
  forms: [Form!]
}

type GetTemplatesOutput {
  ok: Boolean!
  error: String
  templates: [Template!]
}

type FindTemplateByIdOutput {
  ok: Boolean!
  error: String
  template: Template
}

type CreateSubmissionOutput {
  ok: Boolean!
  error: String
}

type FindSubmissionByIdOutput {
  ok: Boolean!
  error: String
  submission: Submission
}

type DeleteSubmissionOutput {
  ok: Boolean!
  error: String
}

type GetKeywordAnalysisOutput {
  ok: Boolean!
  error: String
  result: [[String!]!]
}

type GetCorrOutput {
  ok: Boolean!
  error: String
}

type GetSendHistoryOutput {
  ok: Boolean!
  error: String
  data: [String!]
}

type SendSmsOutput {
  ok: Boolean!
  error: String
}

type Query {
  findUserById(input: FindUserByIdInput!): FindUserByIdOutput!
  me: meOutput!
  getSignedUrl(input: String!): String!
  findSectionById(input: FindSectionByIdInput!): FindSectionByIdOutput!
  findFormById(input: FindFormByIdInput!): FindFormByIdOutput!
  findFormByIdForOwner(input: FindFormByIdInput!): FindFormByIdOutput!
  searchForms(input: SearchFormsInput!): SearchFormsOutput!
  getForms(input: GetFormsInput!): GetFormsOutput!
  getTemplates: GetTemplatesOutput!
  findTemplateById(input: FindTemplateByIdInput!): FindTemplateByIdOutput!
  getSendHistory(input: GetSendHistoryInput!): GetSendHistoryOutput!
  findSubmissionById(input: FindSubmissionByIdInput!): FindSubmissionByIdOutput!
  getKeywordAnalysis(input: GetKeywordAnalysisInput!): GetKeywordAnalysisOutput!
  getCorr(input: GetCorrInput!): GetCorrOutput!
}

input FindUserByIdInput {
  id: String!
}

input FindSectionByIdInput {
  sectionId: String!
}

input FindFormByIdInput {
  formId: String!
}

input SearchFormsInput {
  title: String!
  lastId: String
}

input GetFormsInput {
  lastId: String
}

input FindTemplateByIdInput {
  templateId: String!
}

input GetSendHistoryInput {
  page: Float!
  pageSize: Float!
  startDate: Float
  limitDate: Float
}

input FindSubmissionByIdInput {
  submissionId: String!
}

input GetKeywordAnalysisInput {
  formId: String!
  questionId: String!
}

input GetCorrInput {
  formId: String!
  questionIds: [String!]!
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  editUser(input: EditUserInput!, file: Upload!): EditUserOutput!
  createForm(input: CreateFormInput!): CreateFormOutput!
  deleteForm(input: DeleteFormInput!): DeleteFormOutput!
  editForm(input: EditFormInput!): EditFormOutput!
  sendSms(input: SendSmsInput!): SendSmsOutput!
  createSubmission(input: CreateSubmissionInput!): CreateSubmissionOutput!
  deleteSubmission(input: DeleteSubmissionInput!): DeleteSubmissionOutput!
}

input CreateAccountInput {
  username: String!
  phoneNum: String
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input EditUserInput {
  username: String
  phoneNum: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateFormInput {
  title: String!
  description: String
  state: FormState!
  expiredAt: DateTime
  privacyExpiredAt: DateTime
  sections: [CreateSectionInput!]
}

input CreateSectionInput {
  title: String
  order: Float!
  opened: [CreateOpenedQuestionInput!]
  closed: [CreateClosedQuestionInput!]
  grid: [CreateGridQuestionInput!]
  personal: [CreatePersonalQuestionInput!]
  linear: [CreateLinearQuestionInput!]
}

input CreateOpenedQuestionInput {
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  attachment: String
  openedType: OpenedQuestionType
}

input CreateClosedQuestionInput {
  choices: [ClosedQuestionChoiceInput!]!
  closedType: ClosedQuestionType
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
}

input ClosedQuestionChoiceInput {
  no: Float!
  choice: String!
  attachment: String
  activatedSection: String
}

input CreateGridQuestionInput {
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  rowContent: [String!]
  colContent: [String!]
  gridType: GridQuestionType
}

input CreatePersonalQuestionInput {
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  attachment: String
  encoded: Boolean!
  personalType: PersonalQuestionType!
}

input CreateLinearQuestionInput {
  content: String!
  kind: QuestionType!
  description: String
  required: Boolean
  order: Float!
  leftRange: Float!
  rightRange: Float!
  leftLabel: String
  rightLabel: String
}

input DeleteFormInput {
  formId: String!
}

input EditFormInput {
  title: String
  description: String
  state: FormState
  expiredAt: DateTime
  privacyExpiredAt: DateTime
  sections: [CreateSectionInput!]
  formId: String!
  representativeQuestionId: String!
  isPromoted: Boolean
}

input SendSmsInput {
  sender: String!
  receiver: String!
  msg: String!
}

input CreateSubmissionInput {
  formId: String!
  sections: [SectionInCreateSubmissionInput!]!
}

input SectionInCreateSubmissionInput {
  sectionId: String!
  answers: [CreateAnswersInput!]
}

input CreateAnswersInput {
  Opened: [CreateOpenedAnswerInput!]
  Closed: [CreateClosedAnswerInput!]
  Linear: [CreateLinearAnswerInput!]
  Grid: [CreateGridAnswerInput!]
  Personal: [CreatePersonalAnswerInput!]
}

input CreateOpenedAnswerInput {
  content: String
  question: String!
  kind: QuestionType!
}

input CreateClosedAnswerInput {
  no: [Float!]!
  question: String!
  kind: QuestionType!
}

input CreateLinearAnswerInput {
  no: Float!
  question: String!
  kind: QuestionType!
}

input CreateGridAnswerInput {
  content: [GridAnswerContentInputType!]
  question: String!
  kind: QuestionType!
}

input GridAnswerContentInputType {
  rowNo: Float!
  colNo: Float!
}

input CreatePersonalAnswerInput {
  question: String!
  kind: QuestionType!
  content: String
}

input DeleteSubmissionInput {
  submissionId: String!
}